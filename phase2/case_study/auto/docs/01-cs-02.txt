To implement a `Smart Parking System for Connected Vehicles` 
ith Oracle as the database, 
you'll need a set of well-structured tables 
to support the appâ€™s functionalities. 
Below is a list of tables and their descriptions:

---

`1. Users Table`
Stores information about all users of the system (drivers, admins, etc.).

```sql
CREATE TABLE Users (
    user_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           VARCHAR2(100) NOT NULL,
    email          VARCHAR2(100) UNIQUE NOT NULL,
    password       VARCHAR2(255) NOT NULL,
    phone          VARCHAR2(15),
    role           VARCHAR2(20) CHECK (role IN ('admin', 'driver')) NOT NULL,
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

`2. Vehicles Table`
Stores information about vehicles registered by users.

```sql
CREATE TABLE Vehicles (
    vehicle_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id        NUMBER NOT NULL,
    vehicle_number VARCHAR2(20) UNIQUE NOT NULL,
    model          VARCHAR2(50),
    type           VARCHAR2(20), -- e.g., car, bike, SUV
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
```

---

`3. Parking_Spots Table`
Stores details about each parking spot in the system.

```sql
CREATE TABLE Parking_Spots (
    spot_id        NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    location       VARCHAR2(200) NOT NULL,
    latitude       NUMBER(10, 6),
    longitude      NUMBER(10, 6),
    capacity       NUMBER DEFAULT 1, -- Number of vehicles the spot can accommodate
    price_per_hour NUMBER(10, 2) NOT NULL,
    is_available   NUMBER(1) DEFAULT 1 CHECK (is_available IN (0, 1)), -- 0 = No, 1 = Yes
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

---

`4. Bookings Table`
Stores details about parking spot reservations made by users.

```sql
CREATE TABLE Bookings (
    booking_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id        NUMBER NOT NULL,
    spot_id        NUMBER NOT NULL,
    vehicle_id     NUMBER NOT NULL,
    booking_date   DATE NOT NULL,
    start_time     TIMESTAMP NOT NULL,
    end_time       TIMESTAMP NOT NULL,
    total_price    NUMBER(10, 2),
    status         VARCHAR2(20) DEFAULT 'Pending' CHECK (status IN ('Pending', 'Confirmed', 'Cancelled')),
    FOREIGN KEY (user_id) REFERENCES Users(user_id),
    FOREIGN KEY (spot_id) REFERENCES Parking_Spots(spot_id),
    FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id)
);
```

---

`5. Payments Table`
Stores payment details for bookings.

```sql
CREATE TABLE Payments (
    payment_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    booking_id     NUMBER NOT NULL,
    user_id        NUMBER NOT NULL,
    amount         NUMBER(10, 2) NOT NULL,
    payment_date   TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status         VARCHAR2(20) DEFAULT 'Pending' CHECK (status IN ('Pending', 'Completed', 'Failed')),
    FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
```

---

`6. Reviews Table`
Stores user reviews for parking spots.

```sql
CREATE TABLE Reviews (
    review_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    spot_id        NUMBER NOT NULL,
    user_id        NUMBER NOT NULL,
    rating         NUMBER(1) CHECK (rating BETWEEN 1 AND 5),
    comment        VARCHAR2(500),
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (spot_id) REFERENCES Parking_Spots(spot_id),
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
```

---

`7. Notifications Table`
Stores notifications sent to users.

```sql
CREATE TABLE Notifications (
    notification_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         NUMBER NOT NULL,
    message         VARCHAR2(500),
    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_read         NUMBER(1) DEFAULT 0 CHECK (is_read IN (0, 1)), -- 0 = Unread, 1 = Read
    FOREIGN KEY (user_id) REFERENCES Users(user_id)
);
```

---

`8. Admin Logs Table`
Keeps a log of admin activities in the system.

```sql
CREATE TABLE Admin_Logs (
    log_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    admin_id       NUMBER NOT NULL,
    action         VARCHAR2(500),
    created_at     TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (admin_id) REFERENCES Users(user_id)
);
```

---

`Relationships Between Tables`
- `Users`: Users can have multiple vehicles and

bookings.  
- `Vehicles`: Each vehicle belongs to a single user and can be associated with multiple bookings.  
- `Parking_Spots`: Parking spots can be reserved by multiple users (via bookings).  
- `Bookings`: Each booking links a user, a vehicle, and a parking spot.  
- `Payments`: Each payment corresponds to a specific booking.  
- `Reviews`: Reviews link users to parking spots.

---

Additional Notes:
- Use `indexes` for frequently queried fields such as `user_id`, `spot_id`, and `booking_id`.
- Add `triggers` if needed, e.g., to update `is_available` in the `Parking_Spots` table when a booking is confirmed or cancelled.
- Optimize the database by partitioning large tables like `Bookings` or `Payments` based on dates or locations.

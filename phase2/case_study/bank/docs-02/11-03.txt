Here’s a set of `Oracle SQL tables` designed for a `Bank Management System`. 
Each table includes essential fields 
to cover the key functionalities of the system, 
including user management, accounts, transactions, 
          loans, and admin features.

---

`1. USERS Table`
Stores information about the users.

```sql
CREATE TABLE USERS (
    USER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FIRST_NAME VARCHAR2(50) NOT NULL,
    LAST_NAME VARCHAR2(50) NOT NULL,
    EMAIL VARCHAR2(100) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(255) NOT NULL,
    PHONE_NUMBER VARCHAR2(15) UNIQUE,
    ADDRESS VARCHAR2(255),
    CREATED_AT DATE DEFAULT SYSDATE,
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (STATUS IN ('ACTIVE', 'INACTIVE'))
);
```

---

`2. ADMIN Table`
Stores information about bank admins.

```sql
CREATE TABLE ADMIN (
    ADMIN_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USERNAME VARCHAR2(50) UNIQUE NOT NULL,
    PASSWORD VARCHAR2(255) NOT NULL,
    ROLE VARCHAR2(50) DEFAULT 'STAFF' CHECK (ROLE IN ('STAFF', 'MANAGER', 'SUPERADMIN')),
    CREATED_AT DATE DEFAULT SYSDATE
);
```

---

`3. ACCOUNTS Table`
Stores information about user bank accounts.

```sql
CREATE TABLE ACCOUNTS (
    ACCOUNT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    ACCOUNT_TYPE VARCHAR2(50) NOT NULL CHECK (ACCOUNT_TYPE IN ('SAVINGS', 'CURRENT', 'LOAN')),
    BALANCE NUMBER(15, 2) DEFAULT 0,
    INTEREST_RATE NUMBER(5, 2) DEFAULT 0,
    CREATED_AT DATE DEFAULT SYSDATE,
    STATUS VARCHAR2(20) DEFAULT 'ACTIVE' CHECK (STATUS IN ('ACTIVE', 'CLOSED')),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
```

---

`4. TRANSACTIONS Table`
Tracks all user transactions.

```sql
CREATE TABLE TRANSACTIONS (
    TRANSACTION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ACCOUNT_ID NUMBER NOT NULL,
    TRANSACTION_TYPE VARCHAR2(20) NOT NULL CHECK (TRANSACTION_TYPE IN ('DEPOSIT', 'WITHDRAWAL', 'TRANSFER')),
    AMOUNT NUMBER(15, 2) NOT NULL,
    TRANSACTION_DATE DATE DEFAULT SYSDATE,
    STATUS VARCHAR2(20) DEFAULT 'SUCCESS' CHECK (STATUS IN ('SUCCESS', 'PENDING', 'FAILED')),
    DESCRIPTION VARCHAR2(255),
    FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNTS(ACCOUNT_ID)
);
```

---

`5. LOANS Table`
Manages user loan applications and statuses.

```sql
CREATE TABLE LOANS (
    LOAN_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    LOAN_TYPE VARCHAR2(50) NOT NULL CHECK (LOAN_TYPE IN ('PERSONAL', 'HOME', 'CAR', 'BUSINESS')),
    LOAN_AMOUNT NUMBER(15, 2) NOT NULL,
    INTEREST_RATE NUMBER(5, 2) NOT NULL,
    TENURE_MONTHS NUMBER NOT NULL,
    APPROVED_AMOUNT NUMBER(15, 2),
    LOAN_STATUS VARCHAR2(20) DEFAULT 'PENDING' CHECK (LOAN_STATUS IN ('PENDING', 'APPROVED', 'REJECTED')),
    APPLICATION_DATE DATE DEFAULT SYSDATE,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
```

---

`6. REPORTS Table`
Stores information about reports generated by admins.

```sql
CREATE TABLE REPORTS (
    REPORT_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ADMIN_ID NUMBER NOT NULL,
    REPORT_TYPE VARCHAR2(50) NOT NULL CHECK (REPORT_TYPE IN ('USER_ACTIVITY', 'TRANSACTIONS', 'LOANS', 'BALANCES')),
    GENERATED_DATE DATE DEFAULT SYSDATE,
    DESCRIPTION VARCHAR2(255),
    FOREIGN KEY (ADMIN_ID) REFERENCES ADMIN(ADMIN_ID)
);
```

---

`7. ACCOUNT_LOGINS Table`
Tracks user logins for security and analytics.

```sql
CREATE TABLE ACCOUNT_LOGINS (
    LOGIN_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER NOT NULL,
    LOGIN_TIME DATE DEFAULT SYSDATE,
    IP_ADDRESS VARCHAR2(50),
    DEVICE_INFO VARCHAR2(255),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
```

---

`8. NOTIFICATIONS Table`
Stores notifications sent to users or admins.

```sql
CREATE TABLE NOTIFICATIONS (
    NOTIFICATION_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID NUMBER,
    ADMIN_ID NUMBER,
    MESSAGE VARCHAR2(255) NOT NULL,
    NOTIFICATION_DATE DATE DEFAULT SYSDATE,
    STATUS VARCHAR2(20) DEFAULT 'UNREAD' CHECK (STATUS IN ('READ', 'UNREAD')),
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (ADMIN_ID) REFERENCES ADMIN(ADMIN_ID)
);
```

---

`Relationships Between Tables`

1. `USERS → ACCOUNTS`  
   One user can have multiple accounts (1:N).
2. `ACCOUNTS → TRANSACTIONS`  
   Each transaction is linked to an account (1:N).
3. `USERS → LOANS`  
   One user can apply for multiple loans (1:N).
4. `ADMIN → REPORTS`  
   Admins generate reports (1:N).
5. `NOTIFICATIONS`  
   Notifications can be sent to users or admins.

---

If you need `sample data` or `stored procedures` to manage these tables, let me know!
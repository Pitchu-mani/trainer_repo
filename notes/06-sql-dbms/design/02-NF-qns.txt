UNF: with duplicate, with repeating groups 
1NF: no repeating group. we will have key.
Partial dependency means non-key depends not fully on key. 
2NF: no duplicate by no partial dependency. 
    if 1NF to 2NF, 
        we will have one or more new table(s).
        we may FK also.
Transitive dependency means 
    non-key 
    depends on another non-key which 
    depends on key.
3NF: no duplicate by no transitive dependency. 
    if 2NF to 3NF, 
        we will have one or more new table(s).
        we may FK also.


Qn:
Solve:
    Problem:
        UNF: STUDENT_COURSES {StudentID, StudentName, Address, 
                Course1ID, Course1Name, Course1Grade, 
                Course2ID, Course2Name, Course2Grade,
                Course3ID, Course3Name, Course3Grade}
        
    Solving:    
        Repeating Columns Set: CourseID, CourseName, CourseGrade
            as Course1ID, Course1Name, Course1Grade, 
                Course2ID, Course2Name, Course2Grade,
                Course3ID, Course3Name, Course3Grade
        1NF: STUDENT_COURSES {StudentID, StudentName, Address, 
                CourseID, CourseName, CourseGrade} PK(StudentID,CourseID)
        Partial Dependencies: CourseName, CourseGrade
        2NF: STUDENT {StudentID, StudentName, Address, CourseID} PK(StudentID) FK(CourseID)
             Course {CourseID, CourseName, CourseGrade} PK(CourseID)
        Transitive Dependencies: None 
    Solution:
        STUDENT {StudentID, StudentName, Address, CourseID} PK(StudentID) FK(CourseID)
        Course {CourseID, CourseName, CourseGrade} PK(CourseID)

Qn:
Solve: 
    Problem:
        UNF: Order_Details {OrderID,  CustomerID,  CustomerName,  OrderDate,  
                    Product1ID,  Product1Name,  Product1Quantity,  Product1Price,  
                    Product2ID,  Product2Name,  Product2Quantity,  Product2Price}
        
    Solving:    
        Repeating Columns: ProductID,  ProductName,  ProductQuantity,  ProductPrice
            as 
                Product1ID,  Product1Name,  Product1Quantity,  Product1Price,
                Product2ID,  Product2Name,  Product2Quantity,  Product2Price
        1NF: Order_Details {OrderID,  CustomerID,  CustomerName,  OrderDate,  
                    ProductID,  ProductName,  ProductQuantity,  ProductPrice} PK(OrderID, ProductID)
        Partial Dependecies: ProductName, ProductPrice
        1NF: Order_Details {OrderID,  CustomerID,  CustomerName,  OrderDate,  
                    ProductID,  ProductQuantity} PK(OrderID) FK(ProductID)
            Product{ProductID,  ProductName, ProductPrice} PK (ProductID)
        Transitive Dependencies: CustomerName -> CustomerID -> Key, CustomerID -> CustomerName -> Key
        2NF: Order_Details {OrderID,  CustomerID,  OrderDate,  
                    ProductID,  ProductQuantity} PK(OrderID) FK(ProductID) FK(CustomerID)
            Customer {CustomerID,  CustomerName} PK(CustomerID)
            --
            Product{ProductID,  ProductName, ProductPrice} PK (ProductID)
    Solution:
        Order_Details {OrderID,  CustomerID,  OrderDate,  
                ProductID,  ProductQuantity} PK(OrderID) FK(ProductID) FK(CustomerID)
        Customer {CustomerID,  CustomerName} PK(CustomerID)
        Product{ProductID,  ProductName, ProductPrice} PK (ProductID)
    

Solve: 
    Problem: EMPLOYEE_PROJECT {EmployeeID, EmployeeName,
        DepartmentID, DepartmentName, 
        Project1ID, Project1Name, Project1Hours, 
        Project2ID, Project2Name, Project2Hours}


Solve: 
    Problem: LIBRARY_TRANSACTIONS {TransactionID, MemberID, MemberName, TransactionDate, 
        Book1ID, Book1Title, Book1DueDate, 
        Book2ID, Book2Title, Book2DueDate}

        
Solve: 
    Problem: Table: SALES_DATA{SaleID, StoreID, StoreLocation, SaleDate, 
        Product1ID, Product1Name, Product1Quantity, Product1Revenue, 
        Product2ID, Product2Name, Product2Quantity, Product2Revenue}
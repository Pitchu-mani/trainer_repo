what is smart pointer?

what are smart pointers? 
    1. unique_ptr 
        Employee { name, age }  //name, age -> replaces as smart_ptr instead of dynamic mem 
        Programmer : Employee { job } //job -> replaces as smart_ptr instead of dynamic mem 
        ProjectLead : Programmer { reports } //reports -> replaces as smart_ptr instead of dynamic mem 
        PrjMgr : ProjectLead { project } //project -> replaces as smart_ptr instead of dynamic mem 
    2. shared_ptr 
    Example: Doubly Linked List , Circular Linked List 
        head [.-> 10]
        10 <-> 20 <-> 30 <-> 40 <-> 50

        shared resource -> shared_ptr
    Example: Red Black Tree 
           10 root
           / \ 
          7  30
          / \
         5  8  
        as we cannot take the copy of unique_ptr, we cannot share it.
         unique_ptr<int> x = make_unique<int>(10);
         unique_ptr<int> y = x;//wrong 
         unique_ptr<int> y = move(x);//transfer  
        as we cannot take the copy of unique_ptr, we cannot share it.
         shared_ptr<int> x = make_shared<int>(10); // count = 1
         shared_ptr<int> y = x;//legal             // count = 2
        
        //to avoid the circular reference: 
        class Parent { val; child:shared_ptr<Child> child;}
        class Child { val; parent:shared_ptr<Parent> parent;}

        shared_ptr<Parent> parent = make_shared<Parent>(10);
        shared_ptr<Child> child = make_shared<Child>(20);
        parent->child = child;
        child->parent = parent; // circular reference 
        //to avoid the circular reference:  we go for weak_ptr 
        class Parent { val; child:shared_ptr<Child> child;}
        class Child { val; parent:weak_ptr<Parent> parent;}

        shared_ptr<Parent> parent = make_shared<Parent>(10);
        shared_ptr<Child> child = make_shared<Child>(20);
        parent->child = child;
        child->parent = parent; // circular reference 

    // 
    // Coding Question: 1.1
    Employee {id, age, name} //id, age, name are value objects 
    Employee e1(101,22,"Athira"),e2(102,23,"Bhagya");
    cout << e1 << endl; //101 22 Athira
    cout << e2 << endl; //102 23 Bhagya
    e1.swap(e2);
    cout << e1 << endl; //102 23 Bhagya
    cout << e2 << endl; //101 22 Athira
    //1.2 "id, age, name" as dynamic memory using new and delete 
    //1.3 Programmer { string* tasks; int taskCount; } : Employee | tasks is the multiple tasks - array of task 
        swap function overloadable
        here, create the dynamic programmer object assigned to employee pointer.
        field 'tasks' is dynamic memoery.
        operator << overloadable, swap is overridden.
    //1.4 replace dynamic fields as smart pointers 
        prove that Employee virtual destructor is not needed.
        create the dynamic programmer object assigned to employee smart pointer 
    //1.5 construct array of N programmers. read programmers from keyboard.
        cin >> var; // overload operator>> in employee and programmer 
    Task 
        2.1
            change the crud ops with HospitalStay from array of HospitalStay called `stays`
            to vector<HospitalStay> stays.
        2.2 vector -> deque 